//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class E_MyEnumWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(E_MyEnum));
		L.RegVar("Idle", get_Idle, null);
		L.RegVar("Move", get_Move, null);
		L.RegVar("Atk", get_Atk, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<E_MyEnum>.Check = CheckType;
		StackTraits<E_MyEnum>.Push = Push;
	}

	static void Push(IntPtr L, E_MyEnum arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(E_MyEnum), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Idle(IntPtr L)
	{
		ToLua.Push(L, E_MyEnum.Idle);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Move(IntPtr L)
	{
		ToLua.Push(L, E_MyEnum.Move);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Atk(IntPtr L)
	{
		ToLua.Push(L, E_MyEnum.Atk);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		E_MyEnum o = (E_MyEnum)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

